{"version":3,"sources":["components/Navbar.js","components/alert.js","components/About.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","style","width","height","cursor","for","role","placeholder","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","message","About","myStyle","color","backgroundColor","border","borderColor","defaultProps","TextForm","useState","text","setText","htmlFor","heading","value","onChange","event","target","rows","disabled","length","newText","navigator","clipboard","writeText","split","filter","element","toFixed","App","setMode","setalert","bgBodyRemover","document","body","classList","remove","cls","showAlert","add","setTimeout","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8194bf19.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n//   let mode='';\r\n  \r\n//   if(props.mode==='light')\r\n//   {\r\n//     mode='dark';\r\n    \r\n//   }\r\n//   else{mode='light';\r\n  \r\n// }\r\n    return (\r\n        <div>\r\n           <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    { <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>  /*THIS IS CALLED PROPS MEANS PROPERTIES WHICH WE ARE PASSING TO COMPONENTS */}\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li>\r\n        \r\n      </ul>\r\n         \r\n      <div className='d-flex mx-3'>\r\n        \r\n        <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{width:'30px',height:'20px',cursor:\"pointer\"}}></div>\r\n        <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}} style={{width:'30px',height:'20px',cursor:\"pointer\"}}></div>\r\n        <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}} style={{width:'30px',height:'20px',cursor:\"pointer\"}}></div>\r\n        <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}} style={{width:'30px',height:'20px',cursor:\"pointer\"}}></div>\r\n      </div>\r\n      <div className=\"form-check form-switch \">\r\n      <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} for=\"flexSwitchCheckDefault\"></label>\r\n      <input className=\"form-check-input\" onClick={()=>{props.toggleMode('dark')}} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      \r\n    </div>\r\n    \r\n    <form className=\"d-flex mx-3\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className={`btn btn-${props.mode==='light'?'dark':'light'}`} type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={title: PropTypes.string.isRequired};//isRequired MEANS TITLE PROP MUST BE THERE IN THE COMPONENT\r\nNavbar.defaultProps={title: \"User\"};// TO SET THE DEFAULT VALUES OF PROPS ","import React from 'react'\r\n\r\nexport default function alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n\r\n           { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {capitalize(props.alert.type)} <strong>{props.alert.message}</strong>\r\n              \r\n        </div>}\r\n        </div>\r\n       \r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n// import { useState } from 'react/cjs/react.development';\r\n\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color:props.mode==='light'?'black':'light',\r\n    //     backgroundColor:props.mode==='light'?'black':'light'\r\n    // });\r\n     let myStyle={\r\n        color:props.mode==='dark'?'white':'#434444',\r\n        backgroundColor:props.mode==='dark'?'#434444':'white',\r\n        border:'2px solid',\r\n        borderColor:props.mode==='dark'?'white':'#434444'\r\n     }\r\n    \r\n\r\n  \r\n\r\n    \r\n    return (\r\n        <div className={`container `} style={{color:props.mode==='dark'?'white':'#434444'}}>\r\n            <h1 className=\"my-2\">About us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={myStyle}type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                      <strong>Analyze your text</strong>  \r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        Text utils gives you a way to utilize your text quickly and efficiently.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        <strong>Free To Use</strong>   \r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        It is totaly free to use there is no charges  for using are services to manipulate your text.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        <strong>Browser compatibility</strong>   \r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                       This word counter software work in any browser like chrome, Firefow and Internet Explorer\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                {/* <button className=\"btn btn-primary my-2\" onClick={handleDarkMode}>{btnText}</button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText]=useState(\"\"); \r\n    // text=\"hello\"; WRONG WAY TO CHANGE THE STATE TO CHANGE THE STATE WE ALWAYS HAVE TO USE THE setText() funtion\r\n    //Correct way to set the state\r\n    const handleUpperCase=()=>{\r\n        \r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.alert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleLowerCase=()=>{\r\n        \r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.alert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleClear=()=>{\r\n        \r\n        let newText=\"\";\r\n        setText(newText);\r\n        props.alert(\"Txt cleared\",\"success\");\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        \r\n        setText(event.target.value);\r\n        // props.alert(\"Converted to uppercase\",\"success\");\r\n    }\r\n    const handleCopy=()=>\r\n    {\r\n        // var text=document.getElementById(\"myBox\");\r\n        // text.select();\r\n        navigator.clipboard.writeText(text);\r\n        props.alert(\"Text Copied \",\"success\");\r\n    }\r\n\r\n    // const handleSpaces=()=>{\r\n    //     let newText=text.split(/[ ]+/);\r\n    //     setText(newText);\r\n    // }\r\n    return (\r\n        <>\r\n        <div className=\"container\">   \r\n            \r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"myBox\" className=\"form-label\"><h3 className={`text-${props.mode==='light'?'dark':'light'}`}>{props.heading}</h3></label>\r\n                 <textarea value={text} className='form-control' style={{backgroundColor:props.mode==='light'?'dark':'light'}} onChange={handleOnChange} id=\"myBox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className={`btn my-1 mx-1 btn-${props.mode==='light'?'dark':'light'}`}  onClick={handleUpperCase} >Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className={`btn mx-1 my-1 btn-${props.mode==='light'?'dark':'light'}`} onClick={handleLowerCase} >Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className={`btn my-1 mx-1 btn-${props.mode==='light'?'dark':'light'}`} onClick={handleClear} >Clear Text</button>\r\n            <button disabled={text.length===0} className={`btn mx-1 my-1 btn-${props.mode==='light'?'dark':'light'}`} onClick={handleCopy} >Copy</button>\r\n             \r\n        </div>\r\n        <div className=\" my-3\">\r\n        <div className=\"container\">\r\n            <h2 className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                Your Text Summary\r\n            </h2>\r\n            <p className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                {(text.split(/\\s+/).filter((element)=>element.length!==0).length)} Words, {text.length} Characters \r\n                \r\n            </p>\r\n            <p className={`text-${props.mode==='light'?'dark':'light'}`}><strong>{(0.008*((text.split(/\\s+/).filter((element)=>element.length!==0).length))).toFixed(2)} Minutes To read</strong></p>\r\n\r\n        </div>\r\n        <div className=\"container\">\r\n        <h2 className={`text-${props.mode==='light'?'dark':'light'}`}>Preview :</h2>\r\n            <p className={`text-${props.mode==='light'?'dark':'light'}`}>\r\n                {text===''?'Nothing to preview':text}\r\n            </p>\r\n        </div>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes={heading :PropTypes.string.isRequired};","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/alert';\nimport About from './components/About';\n\nimport React, { useState } from 'react'\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n  \n} from \"react-router-dom\";\n// import About from './components/About';\nimport TextForm from './components/TextForm';\n\n\n\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const bgBodyRemover=()=>{\n    document.body.classList.remove('bg-primary');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-danger');\n    document.body.classList.remove('bg-warning');\n  }\n  const toggleMode=(cls)=>{\n    if(cls===\"dark\")\n    {\n    bgBodyRemover();\n    if(mode===\"light\")\n    {\n      setMode(\"dark\");\n    document.body.style.backgroundColor='#434444';\n    showAlert(\"Dark Mode is Enabled\",\"success\");\n    // document.title=\"TextUtils - Dark Mode\";\n  }\n    else{\n      setMode(\"light\");\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode is Enabled\",\"success\");\n      // document.title=\"TextUtils - light Mode\";\n    }\n\n    }\n    else{\n      bgBodyRemover();\n    document.body.classList.add('bg-'+cls);\n    }\n   \n  }\n  const showAlert=(message,type)=>{\n    setalert(\n      {\n        message:message,\n        type:type\n      }\n    )\n\n    setTimeout(() => {\n      setalert(null);\n      \n    }, 2000);\n\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}></Alert>\n      <div className=\"container my-3\">\n      \n        <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} />}>\n            </Route>\n            <Route exact path=\"/\" element={< TextForm heading=\"Try Textutils - Uppercase to LowerCase, LowerCase to UpperCase, Copytext etc.\" mode={mode} alert={showAlert} toggleMode={toggleMode} />}>\n            </Route>\n          </Routes>\n          {/* < TextForm heading=\"Enter the text Here : \" mode={mode} alert={showAlert} toggleMode={toggleMode} /> */}\n          \n      </div>\n      \n      </Router>\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}